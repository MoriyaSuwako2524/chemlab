Index: Scripts/2dscan_test/qchemfile.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from qchemfile import qchem_out_file, qchem_file, molecule\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nimport os\r\nimport math as ma\r\nimport heapq\r\n\r\nHartree_to_kcal = 627.51  # Conversion factor from Hartree to kcal/mol\r\n\r\n# Helper function: get the file name for a specific (row, col) coordinate\r\ndef locate_row_col(file_name_dict, row, col):\r\n    return file_name_dict[(int(row), int(col))]\r\n\r\n# Helper function: create a suffix string based on coordinate information\r\ndef generate_addtional_suffix(i, j, p, q):\r\n    return f\"_{i}_{j}_row{p}_col{q}\"\r\n\r\n# Read all XYZ files from a folder and return them as a dictionary of molecule objects\r\ndef read_all_xyz(path, suffix):\r\n    all_entries = os.listdir(path)\r\n    file_names = [entry for entry in all_entries if os.path.isfile(os.path.join(path, entry))]\r\n    mol_dict = {}\r\n    for filename in file_names:\r\n        if \".out\" in filename or \".ref\" in filename:\r\n            continue\r\n        mol = molecule()\r\n        mol.read_xyz(path + filename)\r\n        key = mol.filename.split(\"/\")[-1][:-len(suffix)]\r\n        mol_dict[key] = mol\r\n    return mol_dict\r\n\r\n# Class for managing a 2D potential energy surface scan\r\nclass scan_2d(object):\r\n    def __init__(self, row_max, col_max):\r\n        self.row_max = row_max\r\n        self.col_max = col_max\r\n        self.process_array = np.zeros((row_max, col_max))  # stores energy values\r\n        self.check_array = np.zeros((row_max, col_max))    # marks valid points\r\n        self.ref = qchem_file()\r\n        self.new_inp_dict = {}\r\n        self.job_dict = {}\r\n        self.new_inp_path = \"\"\r\n        self.xlabel = \"\"\r\n        self.ylabel = \"\"\r\n        self.title = \"\"\r\n        self.prefix_name = \"\"\r\n        self.path = \"\"\r\n        self.row_start = 0\r\n        self.col_start = 0\r\n        self.row_distance = 0\r\n        self.col_distance = 0\r\n        self.row_mix_list = []\r\n        self.col_mix_list = []\r\n        self.row_type = \"r12\"\r\n        self.col_type = \"r12mr34\"\r\n        self.out_path = \"./new_input/\"\r\n\r\n    # Initialize the reference input file for generating other inputs\r\n    def init_ref(self, ref_path, ref_filename, default=True):\r\n        if default:\r\n            self.ref.molecule.check = True\r\n            self.ref.opt2.check = True\r\n        self.ref_path = ref_path\r\n        self.ref_filename = ref_filename\r\n        self.ref.read_from_file(ref_path + ref_filename)\r\n\r\n    # Read all jobs from multiple .inp.out files and store energies into array\r\n    def read_row_tot_ene_jobs(self):\r\n        r = 1\r\n        for row in range(1, self.row_max + 1):\r\n            c = 1\r\n            row_filename = f\"{self.path}{self.prefix_name}_row{row}.inp.out\"\r\n            row_file = qchem_out_file()\r\n            row_file.read_multiple_jobs_out(row_filename)\r\n            for jobs in row_file.out_texts:\r\n                opt_job = qchem_out_file()\r\n                opt_job.read_opt_from_file(\"\", out_text=jobs)\r\n                if opt_job.opt_converged:\r\n                    self.process_array[r - 1, c - 2] = opt_job.return_final_molecule_energy() * Hartree_to_kcal\r\n                    self.check_array[r - 1, c - 2] = True\r\n                    self.job_dict[(r, c - 1)] = opt_job\r\n                c += 1\r\n            r += 1\r\n\r\n        # Normalize by subtracting the minimum energy\r\n        min_energy = np.min(self.process_array)\r\n        self.process_array -= min_energy\r\n        self.process_array[self.process_array == -min_energy] = 0\r\n        return self.process_array\r\n\r\n    # Plot the 2D energy scan with optional minimax path overlay\r\n    def plot_2d_scan(self, array, path=None, max_ene=None):\r\n\r\n        plt.imshow(array, cmap=\"GnBu\")\r\n        for row in range(self.row_max):\r\n            for col in range(self.col_max):\r\n                plt.text(col - 0.25, row, f\"{array[row, col].round(1)}\")\r\n        plt.yticks(np.arange(0, self.row_max, 2), np.around(np.arange(self.row_start, self.row_start+self.row_distance*self.row_max, self.row_distance*2), 2), fontsize=15)\r\n        plt.xticks(np.arange(0, self.col_max, 2), np.around(np.arange(self.col_start, self.col_start+self.col_distance*self.col_max,self.col_distance*2), 2), fontsize=15)\r\n        plt.xlabel(self.xlabel, fontsize=15)\r\n        plt.ylabel(self.ylabel, fontsize=15)\r\n        plt.title(self.title, fontsize=15)\r\n        plt.colorbar()\r\n\r\n        if path:\r\n            y_coords, x_coords = zip(*path)\r\n            plt.plot(x_coords, y_coords, color='red', linewidth=2.5, label='Minimax Path')\r\n            plt.scatter(x_coords, y_coords, color='red', s=20)\r\n            max_idx = np.argmax([array[i, j] for (i, j) in path])\r\n            max_point = path[max_idx]\r\n            plt.text(max_point[1] + 0.4, max_point[0] + 0.5, fr\"Max $\\Delta E$ = {max_ene.round(2)}\",\r\n                     color='black', fontsize=12, bbox=dict(facecolor='white', edgecolor='black'))\r\n        plt.show()\r\n\r\n    # Generate a dictionary of Q-Chem inputs from optimized jobs\r\n    def generate_inp_dict_from_job_dict(self):\r\n        for row in range(self.row_max):\r\n            for col in range(self.col_max):\r\n                if (row+1, col+1) in self.job_dict:\r\n                    job = self.job_dict[(row+1, col+1)]\r\n                    inp = qchem_file()\r\n                    inp.molecule.check = True\r\n                    inp.opt2.check = True\r\n                    inp.read_from_file(self.ref_path + self.ref_filename)\r\n                    inp.molecule.carti = job.return_final_molecule_carti()\r\n                    inp.opt2.modify_r12(0, round(self.row_start + self.row_distance * row, 2))\r\n                    inp.opt2.modify_r12mr34(0, round(self.col_start + self.col_distance * col, 2))\r\n                    self.new_inp_dict[(row+1, col+1)] = inp\r\n\r\n    # Write new .inp files for 2D scan\r\n    def write_new_scan_2d_inp(self, self_generate=True):\r\n        if self_generate:\r\n            self.generate_inp_dict_from_job_dict()\r\n        for row in range(self.row_max):\r\n            for col in range(self.col_max):\r\n                if not self.check_array[row, col]:\r\n                    continue\r\n                row_dis = round(self.row_start + self.row_distance * row, 2)\r\n                col_dis = round(self.col_start + self.col_distance * col, 2)\r\n                filename = f\"{self.prefix_name}_{row_dis}_{col_dis}_row{row+1}_col{col+1}.inp\"\r\n                with open(self.out_path + filename, \"w\") as out_file:\r\n                    inp = self.new_inp_dict[(row+1, col+1)]\r\n                    text = inp.molecule.return_output_format() + inp.remain_texts + inp.opt2.return_output_format()\r\n                    out_file.write(text)\r\n\r\n    # Parse energy surface from .inp.out files and return normalized energy map\r\n    def return_2d_scan_ene_seperate_map(self, converge_only=True, optimizer=\"default\", process_array=np.zeros((1,1))):\r\n        if process_array.all() == 0:\r\n            process_array = np.zeros((self.row_max, self.col_max))\r\n        check_array = np.zeros_like(process_array)\r\n        row_col_list, file_name_dict = self.return_row_cow_list()\r\n        ref_qof = qchem_out_file()\r\n        ref_qof.read_opt_from_file(self.path + locate_row_col(file_name_dict, 1, 1) + \".inp.out\")\r\n\r\n        for row, col in row_col_list:\r\n            filename = self.path + locate_row_col(file_name_dict, row, col) + \".inp.out\"\r\n            qof = qchem_out_file()\r\n            qof.optimizer = optimizer\r\n            qof.read_opt_from_file(filename)\r\n            if qof.opt_converged or (not converge_only and qof.geom_have_energy):\r\n                ene = qof.return_final_molecule_energy() * Hartree_to_kcal\r\n                process_array[row - 1, col - 1] = ene\r\n                check_array[row - 1, col - 1] = True\r\n\r\n        min_energy = np.min(process_array)\r\n        process_array -= min_energy\r\n        process_array[process_array == -min_energy] = 1e-10\r\n\r\n        self.check_array = check_array\r\n        self.process_array = process_array\r\n        return process_array\r\n\r\n    # Interpolate missing points using neighbor averaging\r\n    def fix_process_array(self, process_array):\r\n        for row in range(self.row_max):\r\n            for col in range(self.col_max):\r\n                if process_array[row, col] != 1e-10:\r\n                    self.check_array[row, col] = True\r\n                    continue\r\n                # Neighbor averaging\r\n                neighbors = []\r\n                for dr, dc in [(-1,0), (1,0), (0,-1), (0,1)]:\r\n                    nr, nc = row+dr, col+dc\r\n                    if 0 <= nr < self.row_max and 0 <= nc < self.col_max and self.check_array[nr, nc]:\r\n                        neighbors.append(process_array[nr, nc])\r\n                if neighbors:\r\n                    process_array[row, col] = sum(neighbors)/len(neighbors)\r\n                    self.check_array[row, col] = True\r\n        self.process_array = process_array\r\n        return process_array\r\n\r\n    # Compute the shortest minimax path (least maximum energy) on 2D energy grid\r\n    def minimax_shortest_path(self, start, end):\r\n        process_array = self.process_array\r\n        rows, cols = process_array.shape\r\n        visited = np.full((rows, cols), False)\r\n        max_energy = np.full((rows, cols), np.inf)\r\n        path_len = np.full((rows, cols), np.inf)\r\n        parent = np.full((rows, cols, 2), -1, dtype=int)\r\n        heap = [(process_array[start], 0, start)]\r\n        max_energy[start] = process_array[start]\r\n        path_len[start] = 0\r\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\r\n\r\n        while heap:\r\n            cur_max, cur_len, (i, j) = heapq.heappop(heap)\r\n            if visited[i, j]:\r\n                continue\r\n            visited[i, j] = True\r\n            if (i, j) == end:\r\n                path = []\r\n                while (i, j) != (-1, -1):\r\n                    path.append((i, j))\r\n                    i, j = parent[i, j]\r\n                return path[::-1], cur_max - process_array[start]\r\n            for di, dj in directions:\r\n                ni, nj = i + di, j + dj\r\n                if 0 <= ni < rows and 0 <= nj < cols:\r\n                    new_max = max(cur_max, process_array[ni, nj])\r\n                    new_len = cur_len + 1\r\n                    if new_max < max_energy[ni, nj] or (\r\n                        np.isclose(new_max, max_energy[ni, nj]) and new_len < path_len[ni, nj]\r\n                    ):\r\n                        max_energy[ni, nj] = new_max\r\n                        path_len[ni, nj] = new_len\r\n                        parent[ni, nj] = [i, j]\r\n                        heapq.heappush(heap, (new_max, new_len, (ni, nj)))\r\n        return None, np.inf\r\n\r\n    # Modify r12 or r12mr34 constraints in input\r\n    def modify_opt2(self, qchem_input_file, type, type_order, num):\r\n        if type == \"r12\":\r\n            qchem_input_file.opt2.modify_r12(type_order, num)\r\n        elif type == \"r12mr34\":\r\n            qchem_input_file.opt2.modify_r12mr34(type_order, num)\r\n\r\n    # Generate .inp files over a full 2D scan grid\r\n    def generate_inp(self):\r\n        ref = qchem_file()\r\n        ref.opt2.check = True\r\n        ref.read_from_file(self.ref_path + self.ref_filename)\r\n        base_name = self.ref_filename.split(\".\")[0]\r\n        for row in range(self.row_max):\r\n            row_dis = round(self.row_start + self.row_distance * row, 2)\r\n            self.modify_opt2(ref, self.row_type, 0, row_dis)\r\n            for col in range(self.col_max):\r\n                col_dis = round(self.col_start + self.col_distance * col, 2)\r\n                if self.row_type == self.col_type:\r\n                    self.modify_opt2(ref, self.col_type, 1, row_dis)\r\n                else:\r\n                    self.modify_opt2(ref, self.col_type, 0, col_dis)\r\n                suffix = f\"_{row_dis}_{col_dis}_row{row+1}_col{col+1}\"\r\n                with open(self.new_inp_path + base_name + suffix + \".inp\", \"w\") as f:\r\n                    f.write(ref.remain_texts + ref.opt2.return_output_format())\r\n\r\n    # Return list of row/col indices and file name mapping\r\n    def return_row_cow_list(self):\r\n        file_names = os.listdir(self.out_path)\r\n        row_col_list = []\r\n        file_name_dict = {}\r\n        for name in file_names:\r\n            if self.prefix_name not in name:\r\n                continue\r\n            parts = name.split(\".\")[0].split(\"_\")\r\n            row = int(parts[-2][3:])\r\n            col = int(parts[-1][3:])\r\n            if row <= self.row_max and col <= self.col_max:\r\n                row_col_list.append([row, col])\r\n                file_name_dict[(row, col)] = \"_\".join(parts)\r\n        return row_col_list, file_name_dict\r\n\r\n# Example function to run a 2D scan setup\r\ndef run_3119():\r\n    ID3119 = scan_2d(12, 20)\r\n    ID3119.ref_filename = \"ID3119.ref\"\r\n    ID3119.ref_path = \"ref/\"\r\n    ID3119.prefix_name = \"ID3119\"\r\n    ID3119.new_inp_path = \"tem_input/\"\r\n    ID3119.row_type = \"r12\"\r\n    ID3119.col_type = \"r12mr34\"\r\n    ID3119.row_start = 1.5\r\n    ID3119.col_start = -2.0\r\n    ID3119.row_distance = 0.2\r\n    ID3119.col_distance = 0.2\r\n    ID3119.generate_inp()\r\n\r\nrun_3119()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Scripts/2dscan_test/qchemfile.py b/Scripts/2dscan_test/qchemfile.py
--- a/Scripts/2dscan_test/qchemfile.py	(revision c5363210873e132d6b4155806c6f68cff99059ce)
+++ b/Scripts/2dscan_test/qchemfile.py	(date 1746817277045)
@@ -90,7 +90,8 @@
 
     # Plot the 2D energy scan with optional minimax path overlay
     def plot_2d_scan(self, array, path=None, max_ene=None):
-
+        row_start = self.row_start
+        col_start = self.col_start
         plt.imshow(array, cmap="GnBu")
         for row in range(self.row_max):
             for col in range(self.col_max):
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"0421277f-b3cd-4809-a9ac-ca0555b51e5d\" name=\"Changes\" comment=\"fix bug\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Scripts/2dscan_test/qchemfile.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Scripts/2dscan_test/qchemfile.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GithubDefaultAccount\">\r\n    <option name=\"defaultAccountId\" value=\"fd5eb574-2b9c-40ae-aed5-94bc588dc499\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2NazLnewQ5Qi8GB52LQzeFKcYAM\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"last_opened_file_path\": \"D:/calculate/github/chemlab\",\r\n    \"run.code.analysis.last.selected.profile\": \"aDefault\",\r\n    \"settings.editor.selected.configurable\": \"com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\calculate\\github\\chemlab\\Theoretical Chemistry\\Bash for opt\" />\r\n      <recent name=\"D:\\calculate\\github\\chemlab\\Theoretical Chemistry\\ECD\" />\r\n      <recent name=\"D:\\calculate\\github\\chemlab\\Theoretical Chemistry\\Numercial calculation\" />\r\n      <recent name=\"D:\\calculate\\github\\chemlab\\Theoretical Chemistry\\New bash for opt\" />\r\n      <recent name=\"D:\\calculate\\github\\chemlab\\Theoretical Chemistry\\spectra\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\calculate\\github\\chemlab\\Scripts\" />\r\n      <recent name=\"D:\\calculate\\github\\chemlab\\Theoretical Chemistry\\Bash for opt\" />\r\n      <recent name=\"D:\\calculate\\github\\chemlab\\Theoretical Chemistry\\ECD\\ZY20231010\" />\r\n      <recent name=\"D:\\calculate\\github\\chemlab\\Theoretical Chemistry\\article\" />\r\n      <recent name=\"D:\\calculate\\github\\chemlab\\Theoretical Chemistry\\Numercial calculation\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.HF\">\r\n    <configuration name=\"ECDoriginate (1)\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"chemlab\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/Theoretical Chemistry/ECD/ZY20231010\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/Theoretical Chemistry/ECD/ZY20231010/ECDoriginate.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"ECDoriginate\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"chemlab\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/Theoretical Chemistry/ECD\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"D:\\calculate\\github\\chemlab\\Theoretical Chemistry\\ECD\\ZY20231010\\ECDoriginate.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"HF\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"chemlab\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/Theoretical Chemistry\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/Theoretical Chemistry/HF.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"spectra\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"chemlab\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/Theoretical Chemistry/spectra\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/Theoretical Chemistry/spectra/spectra.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"transform_xyz_to_gjf\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"chemlab\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/Theoretical Chemistry/Bash for opt\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/Theoretical Chemistry/Bash for opt/transform_xyz_to_gjf.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.HF\" />\r\n        <item itemvalue=\"Python.transform_xyz_to_gjf\" />\r\n        <item itemvalue=\"Python.ECDoriginate (1)\" />\r\n        <item itemvalue=\"Python.spectra\" />\r\n        <item itemvalue=\"Python.ECDoriginate\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"0421277f-b3cd-4809-a9ac-ca0555b51e5d\" name=\"Changes\" comment=\"\" />\r\n      <created>1679916929457</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1679916929457</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"fix bug\">\r\n      <created>1682332234439</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1682332234439</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"fix bug\">\r\n      <created>1682395873240</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1682395873240</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"fix bug\">\r\n      <created>1682414549711</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1682414549711</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"fix bug\">\r\n      <created>1682414823283</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1682414823283</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"fix bug\">\r\n      <created>1694160767074</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694160767074</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"6\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"0c34fe39-dd24-485f-95a9-0ca92c157dc4\">\r\n          <value>\r\n            <State>\r\n              <option name=\"SHOW_ONLY_AFFECTED_CHANGES\" value=\"true\" />\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"HEAD\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                  <entry key=\"roots\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"$PROJECT_DIR$\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n        <entry key=\"4991c628-651d-490a-ba77-6034c96ea697\">\r\n          <value>\r\n            <State>\r\n              <option name=\"SHOW_ONLY_AFFECTED_CHANGES\" value=\"true\" />\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"HEAD\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                  <entry key=\"structure\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"dir:D:/calculate/github/chemlab/Theoretical Chemistry/Bash for opt\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"OPEN_GENERIC_TABS\">\r\n      <map>\r\n        <entry key=\"0c34fe39-dd24-485f-95a9-0ca92c157dc4\" value=\"TOOL_WINDOW\" />\r\n        <entry key=\"4991c628-651d-490a-ba77-6034c96ea697\" value=\"TOOL_WINDOW\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"fix bug\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"fix bug\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/Theoretical Chemistry/HF.py</url>\r\n          <line>2</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/../../Py/1.py</url>\r\n          <line>4</line>\r\n          <option name=\"timeStamp\" value=\"2\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/Theoretical Chemistry/Bash for opt/extract.py</url>\r\n          <line>1</line>\r\n          <option name=\"timeStamp\" value=\"3\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision c5363210873e132d6b4155806c6f68cff99059ce)
+++ b/.idea/workspace.xml	(date 1760456710591)
@@ -2,7 +2,6 @@
 <project version="4">
   <component name="ChangeListManager">
     <list default="true" id="0421277f-b3cd-4809-a9ac-ca0555b51e5d" name="Changes" comment="fix bug">
-      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Scripts/2dscan_test/qchemfile.py" beforeDir="false" afterPath="$PROJECT_DIR$/Scripts/2dscan_test/qchemfile.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -32,15 +31,15 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "last_opened_file_path": "D:/calculate/github/chemlab",
-    "run.code.analysis.last.selected.profile": "aDefault",
-    "settings.editor.selected.configurable": "com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;last_opened_file_path&quot;: &quot;D:/calculate/github/chemlab&quot;,
+    &quot;run.code.analysis.last.selected.profile&quot;: &quot;aDefault&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;
   }
-}]]></component>
+}</component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
       <recent name="D:\calculate\github\chemlab\Theoretical Chemistry\Bash for opt" />
